{
	"name": "Challenge2FinalDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vmcountryparquet",
						"type": "DatasetReference"
					},
					"name": "country"
				},
				{
					"dataset": {
						"referenceName": "parquet1datesSQL",
						"type": "DatasetReference"
					},
					"name": "dates"
				},
				{
					"dataset": {
						"referenceName": "policyparquet",
						"type": "DatasetReference"
					},
					"name": "policy"
				},
				{
					"dataset": {
						"referenceName": "parquet1covid19_metricssql",
						"type": "DatasetReference"
					},
					"name": "metricssql"
				},
				{
					"dataset": {
						"referenceName": "vmcovid19dataparquet",
						"type": "DatasetReference"
					},
					"name": "metricsvm"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Geography",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "newDates",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "newPolicy",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "Recoveries",
						"type": "DatasetReference"
					},
					"name": "sink4"
				},
				{
					"dataset": {
						"referenceName": "Cases",
						"type": "DatasetReference"
					},
					"name": "sink5"
				},
				{
					"dataset": {
						"referenceName": "deaths",
						"type": "DatasetReference"
					},
					"name": "sink6"
				}
			],
			"transformations": [
				{
					"name": "select2"
				},
				{
					"name": "union1"
				},
				{
					"name": "recoveryselect"
				},
				{
					"name": "casesselect"
				},
				{
					"name": "deathselect"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> country",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> dates",
				"source(output(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          RegionName as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          Date as timestamp,",
				"          C1schoolclosing as long,",
				"          C1Flag as long,",
				"          C2Workplace_closing as long,",
				"          C2Flag as long,",
				"          C3Cancel_public_events as long,",
				"          C3Flag as long,",
				"          C4Restrictions_on_gatherings as long,",
				"          C4Flag as long,",
				"          C5Close_public_transport as long,",
				"          C5Flag as long,",
				"          C6Stay_at_home_requirements as long,",
				"          C6Flag as long,",
				"          C7Restrictions_on_internal_movement as long,",
				"          C7Flag as long,",
				"          C8International_travel_controls as long,",
				"          E1Income_support as long,",
				"          E1Flag as long,",
				"          E2Debt_contract_relief as long,",
				"          E3Fiscal_measures as double,",
				"          E4International_support as double,",
				"          H1Public_information_campaigns as double,",
				"          H1Flag as long,",
				"          H2Testing_policy as long,",
				"          H3Contact_tracing as long,",
				"          H4Emergency_investment_in_healthcare as double,",
				"          H5Investment_in_vaccines as double,",
				"          H6Facial_Coverings as double,",
				"          H6Flag as long,",
				"          H7Vaccination_policy as long,",
				"          H7Flag as long,",
				"          H8Protection_of_elderly_people as long,",
				"          H8Flag as long,",
				"          M1Wildcard as long,",
				"          StringencyIndex as double,",
				"          StringencyIndexForDisplay as double,",
				"          StringencyLegacyIndex as double,",
				"          StringencyLegacyIndexForDisplay as double,",
				"          GovernmentResponseIndex as double,",
				"          GovernmentResponseIndexForDisplay as double,",
				"          ContainmentHealthIndex as double,",
				"          ContainmentHealthIndexForDisplay as double,",
				"          EconomicSupportIndex as double,",
				"          EconomicSupportIndexForDisplay as double,",
				"          id as string,",
				"          rid as string,",
				"          self as string,",
				"          etag as string,",
				"          attachments as string,",
				"          ts as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> policy",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> metricssql",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> metricsvm",
				"policy select(mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"metricssql, metricsvm union(byName: true)~> union1",
				"union1 select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Recovered,",
				"          Recovered_Change,",
				"          ISO3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> recoveryselect",
				"union1 select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          ISO3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> casesselect",
				"union1 select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Deaths,",
				"          Deaths_Change,",
				"          ISO3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> deathselect",
				"country sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['newCountry.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"dates sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['newDates.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          RegionName as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          Date as timestamp,",
				"          C1schoolclosing as long,",
				"          C1Flag as long,",
				"          C2Workplace_closing as long,",
				"          C2Flag as long,",
				"          C3Cancel_public_events as long,",
				"          C3Flag as long,",
				"          C4Restrictions_on_gatherings as long,",
				"          C4Flag as long,",
				"          C5Close_public_transport as long,",
				"          C5Flag as long,",
				"          C6Stay_at_home_requirements as long,",
				"          C6Flag as long,",
				"          C7Restrictions_on_internal_movement as long,",
				"          C7Flag as long,",
				"          C8International_travel_controls as long,",
				"          E1Income_support as long,",
				"          E1Flag as long,",
				"          E2Debt_contract_relief as long,",
				"          E3Fiscal_measures as double,",
				"          E4International_support as double,",
				"          H1Public_information_campaigns as double,",
				"          H1Flag as long,",
				"          H2Testing_policy as long,",
				"          H3Contact_tracing as long,",
				"          H4Emergency_investment_in_healthcare as double,",
				"          H5Investment_in_vaccines as double,",
				"          H6Facial_Coverings as double,",
				"          H6Flag as long,",
				"          H7Vaccination_policy as long,",
				"          H7Flag as long,",
				"          H8Protection_of_elderly_people as long,",
				"          H8Flag as long,",
				"          M1Wildcard as long,",
				"          StringencyIndex as double,",
				"          StringencyIndexForDisplay as double,",
				"          StringencyLegacyIndex as double,",
				"          StringencyLegacyIndexForDisplay as double,",
				"          GovernmentResponseIndex as double,",
				"          GovernmentResponseIndexForDisplay as double,",
				"          ContainmentHealthIndex as double,",
				"          ContainmentHealthIndexForDisplay as double,",
				"          EconomicSupportIndex as double,",
				"          EconomicSupportIndexForDisplay as double,",
				"          id as string,",
				"          rid as string,",
				"          self as string,",
				"          etag as string,",
				"          attachments as string,",
				"          ts as long",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['newPolicy.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3",
				"recoveryselect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Updated as date,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          ISO3 as string",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['Recoveries.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink4",
				"casesselect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          ISO3 as string",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['Cases.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink5",
				"deathselect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Updated as date,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          ISO3 as string",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['death.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink6"
			]
		}
	}
}