{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "team05datafactory"
		},
		"vmSqlServer4_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'vmSqlServer4'"
		},
		"vmSqlServer5_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'vmSqlServer5'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/newPolicy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "challenge2storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "policymetric"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquet1countrysql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "sqldb"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Country",
						"type": "UTF8"
					},
					{
						"name": "CountryCode",
						"type": "UTF8"
					},
					{
						"name": "Latitude",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "Longitude",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquet1covid19_metricssql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbo.Covid19_Metrics.parquet",
						"fileSystem": "sqldb"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ID",
						"type": "INT32"
					},
					{
						"name": "Updated",
						"type": "DATE"
					},
					{
						"name": "Confirmed",
						"type": "INT32"
					},
					{
						"name": "Confirmed_Change",
						"type": "INT32"
					},
					{
						"name": "Deaths",
						"type": "INT32"
					},
					{
						"name": "Deaths_Change",
						"type": "INT32"
					},
					{
						"name": "Recovered",
						"type": "INT32"
					},
					{
						"name": "Recovered_Change",
						"type": "INT32"
					},
					{
						"name": "Latitude",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "Longitude",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "ISO2",
						"type": "UTF8"
					},
					{
						"name": "ISO3",
						"type": "UTF8"
					},
					{
						"name": "Country_Region",
						"type": "UTF8"
					},
					{
						"name": "load_time",
						"type": "INT96"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquet1datesSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbo.Dates.parquet",
						"fileSystem": "sqldb"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "DateKey",
						"type": "INT32"
					},
					{
						"name": "FullDate",
						"type": "DATE"
					},
					{
						"name": "isWeekDay",
						"type": "BOOLEAN"
					},
					{
						"name": "DayOfWeek",
						"type": "INT32"
					},
					{
						"name": "DayOfMonth",
						"type": "INT32"
					},
					{
						"name": "DayOfQuarter",
						"type": "INT32"
					},
					{
						"name": "DayOfYear",
						"type": "INT32"
					},
					{
						"name": "DayName",
						"type": "UTF8"
					},
					{
						"name": "WeekOfYear",
						"type": "INT32"
					},
					{
						"name": "WeekName",
						"type": "UTF8"
					},
					{
						"name": "MonthOfYear",
						"type": "INT32"
					},
					{
						"name": "MonthName",
						"type": "UTF8"
					},
					{
						"name": "CalendarQuarter",
						"type": "INT32"
					},
					{
						"name": "CalendarQuarterName",
						"type": "UTF8"
					},
					{
						"name": "CalendarYear",
						"type": "INT32"
					},
					{
						"name": "FiscalMonth",
						"type": "INT32"
					},
					{
						"name": "FiscalMonthName",
						"type": "UTF8"
					},
					{
						"name": "FiscalQuarter",
						"type": "INT32"
					},
					{
						"name": "FiscalQuarterName",
						"type": "UTF8"
					},
					{
						"name": "FiscalYear",
						"type": "INT32"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/policyparquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "cosmosdb"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CountryName",
						"type": "UTF8"
					},
					{
						"name": "CountryCode",
						"type": "UTF8"
					},
					{
						"name": "RegionName",
						"type": "UTF8"
					},
					{
						"name": "RegionCode",
						"type": "UTF8"
					},
					{
						"name": "Jurisdiction",
						"type": "UTF8"
					},
					{
						"name": "Date",
						"type": "INT96"
					},
					{
						"name": "C1schoolclosing",
						"type": "INT64"
					},
					{
						"name": "C1Flag",
						"type": "INT64"
					},
					{
						"name": "C2Workplace_closing",
						"type": "INT64"
					},
					{
						"name": "C2Flag",
						"type": "INT64"
					},
					{
						"name": "C3Cancel_public_events",
						"type": "INT64"
					},
					{
						"name": "C3Flag",
						"type": "INT64"
					},
					{
						"name": "C4Restrictions_on_gatherings",
						"type": "INT64"
					},
					{
						"name": "C4Flag",
						"type": "INT64"
					},
					{
						"name": "C5Close_public_transport",
						"type": "INT64"
					},
					{
						"name": "C5Flag",
						"type": "INT64"
					},
					{
						"name": "C6Stay_at_home_requirements",
						"type": "INT64"
					},
					{
						"name": "C6Flag",
						"type": "INT64"
					},
					{
						"name": "C7Restrictions_on_internal_movement",
						"type": "INT64"
					},
					{
						"name": "C7Flag",
						"type": "INT64"
					},
					{
						"name": "C8International_travel_controls",
						"type": "INT64"
					},
					{
						"name": "E1Income_support",
						"type": "INT64"
					},
					{
						"name": "E1Flag",
						"type": "INT64"
					},
					{
						"name": "E2Debt_contract_relief",
						"type": "INT64"
					},
					{
						"name": "E3Fiscal_measures",
						"type": "DOUBLE"
					},
					{
						"name": "E4International_support",
						"type": "DOUBLE"
					},
					{
						"name": "H1Public_information_campaigns",
						"type": "DOUBLE"
					},
					{
						"name": "H1Flag",
						"type": "INT64"
					},
					{
						"name": "H2Testing_policy",
						"type": "INT64"
					},
					{
						"name": "H3Contact_tracing",
						"type": "INT64"
					},
					{
						"name": "H4Emergency_investment_in_healthcare",
						"type": "DOUBLE"
					},
					{
						"name": "H5Investment_in_vaccines",
						"type": "DOUBLE"
					},
					{
						"name": "H6Facial_Coverings",
						"type": "DOUBLE"
					},
					{
						"name": "H6Flag",
						"type": "INT64"
					},
					{
						"name": "H7Vaccination_policy",
						"type": "INT64"
					},
					{
						"name": "H7Flag",
						"type": "INT64"
					},
					{
						"name": "H8Protection_of_elderly_people",
						"type": "INT64"
					},
					{
						"name": "H8Flag",
						"type": "INT64"
					},
					{
						"name": "M1Wildcard",
						"type": "INT64"
					},
					{
						"name": "StringencyIndex",
						"type": "DOUBLE"
					},
					{
						"name": "StringencyIndexForDisplay",
						"type": "DOUBLE"
					},
					{
						"name": "StringencyLegacyIndex",
						"type": "DOUBLE"
					},
					{
						"name": "StringencyLegacyIndexForDisplay",
						"type": "DOUBLE"
					},
					{
						"name": "GovernmentResponseIndex",
						"type": "DOUBLE"
					},
					{
						"name": "GovernmentResponseIndexForDisplay",
						"type": "DOUBLE"
					},
					{
						"name": "ContainmentHealthIndex",
						"type": "DOUBLE"
					},
					{
						"name": "ContainmentHealthIndexForDisplay",
						"type": "DOUBLE"
					},
					{
						"name": "EconomicSupportIndex",
						"type": "DOUBLE"
					},
					{
						"name": "EconomicSupportIndexForDisplay",
						"type": "DOUBLE"
					},
					{
						"name": "id",
						"type": "UTF8"
					},
					{
						"name": "rid",
						"type": "UTF8"
					},
					{
						"name": "self",
						"type": "UTF8"
					},
					{
						"name": "etag",
						"type": "UTF8"
					},
					{
						"name": "attachments",
						"type": "UTF8"
					},
					{
						"name": "ts",
						"type": "INT64"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vmcountrydataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "CountryCode",
						"type": "varchar"
					},
					{
						"name": "Latitude",
						"type": "decimal",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "Longitude",
						"type": "decimal",
						"precision": 10,
						"scale": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Country"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vmcountryparquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "vmdb"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Country",
						"type": "UTF8"
					},
					{
						"name": "CountryCode",
						"type": "UTF8"
					},
					{
						"name": "Latitude",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "Longitude",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vmcovid19dataparquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbo.Covid19_Metrics.parquet",
						"fileSystem": "vmdb"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ID",
						"type": "INT32"
					},
					{
						"name": "Updated",
						"type": "DATE"
					},
					{
						"name": "Confirmed",
						"type": "INT32"
					},
					{
						"name": "Confirmed_Change",
						"type": "INT32"
					},
					{
						"name": "Deaths",
						"type": "INT32"
					},
					{
						"name": "Deaths_Change",
						"type": "INT32"
					},
					{
						"name": "Recovered",
						"type": "INT32"
					},
					{
						"name": "Recovered_Change",
						"type": "INT32"
					},
					{
						"name": "Latitude",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "Longitude",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "ISO2",
						"type": "UTF8"
					},
					{
						"name": "ISO3",
						"type": "UTF8"
					},
					{
						"name": "Country_Region",
						"type": "UTF8"
					},
					{
						"name": "load_time",
						"type": "INT96"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vmdatesParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "vmdb"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Country",
						"type": "UTF8"
					},
					{
						"name": "CountryCode",
						"type": "UTF8"
					},
					{
						"name": "Latitude",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "Longitude",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vmSqlServer4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('vmSqlServer4_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SHintegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vmSqlServer5')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('vmSqlServer5_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SHintegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLpipline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CountrySQLserver1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "parquet1countrysql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-29T20:25:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/parquet1countrysql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cosmospipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbSqlApiSource",
								"preferredRegions": []
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['CountryName']"
										},
										"sink": {
											"name": "CountryName"
										}
									},
									{
										"source": {
											"path": "$['CountryCode']"
										},
										"sink": {
											"name": "CountryCode"
										}
									},
									{
										"source": {
											"path": "$['RegionName']"
										},
										"sink": {
											"name": "RegionName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RegionCode']"
										},
										"sink": {
											"name": "RegionCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Jurisdiction']"
										},
										"sink": {
											"name": "Jurisdiction"
										}
									},
									{
										"source": {
											"path": "$['Date']"
										},
										"sink": {
											"name": "Date"
										}
									},
									{
										"source": {
											"path": "$['C1_School closing']"
										},
										"sink": {
											"name": "C1schoolclosing"
										}
									},
									{
										"source": {
											"path": "$['C1_Flag']"
										},
										"sink": {
											"name": "C1Flag"
										}
									},
									{
										"source": {
											"path": "$['C2_Workplace closing']"
										},
										"sink": {
											"name": "C2Workplace_closing"
										}
									},
									{
										"source": {
											"path": "$['C2_Flag']"
										},
										"sink": {
											"name": "C2Flag"
										}
									},
									{
										"source": {
											"path": "$['C3_Cancel public events']"
										},
										"sink": {
											"name": "C3Cancel_public_events"
										}
									},
									{
										"source": {
											"path": "$['C3_Flag']"
										},
										"sink": {
											"name": "C3Flag"
										}
									},
									{
										"source": {
											"path": "$['C4_Restrictions on gatherings']"
										},
										"sink": {
											"name": "C4Restrictions_on_gatherings"
										}
									},
									{
										"source": {
											"path": "$['C4_Flag']"
										},
										"sink": {
											"name": "C4Flag"
										}
									},
									{
										"source": {
											"path": "$['C5_Close public transport']"
										},
										"sink": {
											"name": "C5Close_public_transport"
										}
									},
									{
										"source": {
											"path": "$['C5_Flag']"
										},
										"sink": {
											"name": "C5Flag"
										}
									},
									{
										"source": {
											"path": "$['C6_Stay at home requirements']"
										},
										"sink": {
											"name": "C6Stay_at_home_requirements"
										}
									},
									{
										"source": {
											"path": "$['C6_Flag']"
										},
										"sink": {
											"name": "C6Flag"
										}
									},
									{
										"source": {
											"path": "$['C7_Restrictions on internal movement']"
										},
										"sink": {
											"name": "C7Restrictions_on_internal_movement"
										}
									},
									{
										"source": {
											"path": "$['C7_Flag']"
										},
										"sink": {
											"name": "C7Flag"
										}
									},
									{
										"source": {
											"path": "$['C8_International travel controls']"
										},
										"sink": {
											"name": "C8International_travel_controls"
										}
									},
									{
										"source": {
											"path": "$['E1_Income support']"
										},
										"sink": {
											"name": "E1Income_support"
										}
									},
									{
										"source": {
											"path": "$['E1_Flag']"
										},
										"sink": {
											"name": "E1Flag"
										}
									},
									{
										"source": {
											"path": "$['E2_Debt contract relief']"
										},
										"sink": {
											"name": "E2Debt_contract_relief"
										}
									},
									{
										"source": {
											"path": "$['E3_Fiscal measures']"
										},
										"sink": {
											"name": "E3Fiscal_measures",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['E4_International support']"
										},
										"sink": {
											"name": "E4International_support",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['H1_Public information campaigns']"
										},
										"sink": {
											"name": "H1Public_information_campaigns",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['H1_Flag']"
										},
										"sink": {
											"name": "H1Flag"
										}
									},
									{
										"source": {
											"path": "$['H2_Testing policy']"
										},
										"sink": {
											"name": "H2Testing_policy"
										}
									},
									{
										"source": {
											"path": "$['H3_Contact tracing']"
										},
										"sink": {
											"name": "H3Contact_tracing"
										}
									},
									{
										"source": {
											"path": "$['H4_Emergency investment in healthcare']"
										},
										"sink": {
											"name": "H4Emergency_investment_in_healthcare",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['H5_Investment in vaccines']"
										},
										"sink": {
											"name": "H5Investment_in_vaccines",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['H6_Facial Coverings']"
										},
										"sink": {
											"name": "H6Facial_Coverings",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['H6_Flag']"
										},
										"sink": {
											"name": "H6Flag"
										}
									},
									{
										"source": {
											"path": "$['H7_Vaccination policy']"
										},
										"sink": {
											"name": "H7Vaccination_policy"
										}
									},
									{
										"source": {
											"path": "$['H7_Flag']"
										},
										"sink": {
											"name": "H7Flag"
										}
									},
									{
										"source": {
											"path": "$['H8_Protection of elderly people']"
										},
										"sink": {
											"name": "H8Protection_of_elderly_people"
										}
									},
									{
										"source": {
											"path": "$['H8_Flag']"
										},
										"sink": {
											"name": "H8Flag"
										}
									},
									{
										"source": {
											"path": "$['M1_Wildcard']"
										},
										"sink": {
											"name": "M1Wildcard"
										}
									},
									{
										"source": {
											"path": "$['StringencyIndex']"
										},
										"sink": {
											"name": "StringencyIndex",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['StringencyIndexForDisplay']"
										},
										"sink": {
											"name": "StringencyIndexForDisplay",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['StringencyLegacyIndex']"
										},
										"sink": {
											"name": "StringencyLegacyIndex",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['StringencyLegacyIndexForDisplay']"
										},
										"sink": {
											"name": "StringencyLegacyIndexForDisplay",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['GovernmentResponseIndex']"
										},
										"sink": {
											"name": "GovernmentResponseIndex",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['GovernmentResponseIndexForDisplay']"
										},
										"sink": {
											"name": "GovernmentResponseIndexForDisplay",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['ContainmentHealthIndex']"
										},
										"sink": {
											"name": "ContainmentHealthIndex",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['ContainmentHealthIndexForDisplay']"
										},
										"sink": {
											"name": "ContainmentHealthIndexForDisplay",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['EconomicSupportIndex']"
										},
										"sink": {
											"name": "EconomicSupportIndex",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['EconomicSupportIndexForDisplay']"
										},
										"sink": {
											"name": "EconomicSupportIndexForDisplay",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "$['_rid']"
										},
										"sink": {
											"name": "rid"
										}
									},
									{
										"source": {
											"path": "$['_self']"
										},
										"sink": {
											"name": "self"
										}
									},
									{
										"source": {
											"path": "$['_etag']"
										},
										"sink": {
											"name": "etag"
										}
									},
									{
										"source": {
											"path": "$['_attachments']"
										},
										"sink": {
											"name": "attachments"
										}
									},
									{
										"source": {
											"path": "$['_ts']"
										},
										"sink": {
											"name": "ts"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CosmosDbNoSqlContainer1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "policyparquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-10T23:19:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/policyparquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "vmSqlServer5",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FullDate",
						"type": "date"
					},
					{
						"name": "isWeekDay",
						"type": "bit"
					},
					{
						"name": "DayOfWeek",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DayOfMonth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DayOfQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DayOfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DayName",
						"type": "varchar"
					},
					{
						"name": "WeekOfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WeekName",
						"type": "varchar"
					},
					{
						"name": "MonthOfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MonthName",
						"type": "varchar"
					},
					{
						"name": "CalendarQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CalendarQuarterName",
						"type": "varchar"
					},
					{
						"name": "CalendarYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FiscalMonth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FiscalMonthName",
						"type": "varchar"
					},
					{
						"name": "FiscalQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FiscalQuarterName",
						"type": "varchar"
					},
					{
						"name": "FiscalYear",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dates"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/vmSqlServer5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/vmSqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "vmSqlServer4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Updated",
						"type": "date"
					},
					{
						"name": "Confirmed",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Confirmed_Change",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Deaths",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Deaths_Change",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recovered",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recovered_Change",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Latitude",
						"type": "decimal",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "Longitude",
						"type": "decimal",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "ISO2",
						"type": "varchar"
					},
					{
						"name": "ISO3",
						"type": "varchar"
					},
					{
						"name": "Country_Region",
						"type": "varchar"
					},
					{
						"name": "load_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Covid19_Metrics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/vmSqlServer4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "policyparquet",
								"type": "DatasetReference"
							},
							"name": "policy"
						},
						{
							"dataset": {
								"referenceName": "vmdatesParquet",
								"type": "DatasetReference"
							},
							"name": "dates"
						},
						{
							"dataset": {
								"referenceName": "vmcovid19dataparquet",
								"type": "DatasetReference"
							},
							"name": "metrics"
						},
						{
							"dataset": {
								"referenceName": "vmcountryparquet",
								"type": "DatasetReference"
							},
							"name": "country"
						},
						{
							"dataset": {
								"referenceName": "parquet1covid19_metricssql",
								"type": "DatasetReference"
							},
							"name": "covid19metrics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select3"
						},
						{
							"name": "union1"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CountryName as string,",
						"          CountryCode as string,",
						"          RegionName as string,",
						"          RegionCode as string,",
						"          Jurisdiction as string,",
						"          Date as timestamp,",
						"          C1schoolclosing as long,",
						"          C1Flag as long,",
						"          C2Workplace_closing as long,",
						"          C2Flag as long,",
						"          C3Cancel_public_events as long,",
						"          C3Flag as long,",
						"          C4Restrictions_on_gatherings as long,",
						"          C4Flag as long,",
						"          C5Close_public_transport as long,",
						"          C5Flag as long,",
						"          C6Stay_at_home_requirements as long,",
						"          C6Flag as long,",
						"          C7Restrictions_on_internal_movement as long,",
						"          C7Flag as long,",
						"          C8International_travel_controls as long,",
						"          E1Income_support as long,",
						"          E1Flag as long,",
						"          E2Debt_contract_relief as long,",
						"          E3Fiscal_measures as double,",
						"          E4International_support as double,",
						"          H1Public_information_campaigns as double,",
						"          H1Flag as long,",
						"          H2Testing_policy as long,",
						"          H3Contact_tracing as long,",
						"          H4Emergency_investment_in_healthcare as double,",
						"          H5Investment_in_vaccines as double,",
						"          H6Facial_Coverings as double,",
						"          H6Flag as long,",
						"          H7Vaccination_policy as long,",
						"          H7Flag as long,",
						"          H8Protection_of_elderly_people as long,",
						"          H8Flag as long,",
						"          M1Wildcard as long,",
						"          StringencyIndex as double,",
						"          StringencyIndexForDisplay as double,",
						"          StringencyLegacyIndex as double,",
						"          StringencyLegacyIndexForDisplay as double,",
						"          GovernmentResponseIndex as double,",
						"          GovernmentResponseIndexForDisplay as double,",
						"          ContainmentHealthIndex as double,",
						"          ContainmentHealthIndexForDisplay as double,",
						"          EconomicSupportIndex as double,",
						"          EconomicSupportIndexForDisplay as double,",
						"          id as string,",
						"          rid as string,",
						"          self as string,",
						"          etag as string,",
						"          attachments as string,",
						"          ts as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> policy",
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp,",
						"          DateKey as integer,",
						"          FullDate as date,",
						"          isWeekDay as boolean,",
						"          DayOfWeek as integer,",
						"          DayOfMonth as integer,",
						"          DayOfQuarter as integer,",
						"          DayOfYear as integer,",
						"          DayName as string,",
						"          WeekOfYear as integer,",
						"          WeekName as string,",
						"          MonthOfYear as integer,",
						"          MonthName as string,",
						"          CalendarQuarter as integer,",
						"          CalendarQuarterName as string,",
						"          CalendarYear as integer,",
						"          FiscalMonth as integer,",
						"          FiscalMonthName as string,",
						"          FiscalQuarter as integer,",
						"          FiscalQuarterName as string,",
						"          FiscalYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> dates",
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp,",
						"          DateKey as integer,",
						"          FullDate as date,",
						"          isWeekDay as boolean,",
						"          DayOfWeek as integer,",
						"          DayOfMonth as integer,",
						"          DayOfQuarter as integer,",
						"          DayOfYear as integer,",
						"          DayName as string,",
						"          WeekOfYear as integer,",
						"          WeekName as string,",
						"          MonthOfYear as integer,",
						"          MonthName as string,",
						"          CalendarQuarter as integer,",
						"          CalendarQuarterName as string,",
						"          CalendarYear as integer,",
						"          FiscalMonth as integer,",
						"          FiscalMonthName as string,",
						"          FiscalQuarter as integer,",
						"          FiscalQuarterName as string,",
						"          FiscalYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> metrics",
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp,",
						"          DateKey as integer,",
						"          FullDate as date,",
						"          isWeekDay as boolean,",
						"          DayOfWeek as integer,",
						"          DayOfMonth as integer,",
						"          DayOfQuarter as integer,",
						"          DayOfYear as integer,",
						"          DayName as string,",
						"          WeekOfYear as integer,",
						"          WeekName as string,",
						"          MonthOfYear as integer,",
						"          MonthName as string,",
						"          CalendarQuarter as integer,",
						"          CalendarQuarterName as string,",
						"          CalendarYear as integer,",
						"          FiscalMonth as integer,",
						"          FiscalMonthName as string,",
						"          FiscalQuarter as integer,",
						"          FiscalQuarterName as string,",
						"          FiscalYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> country",
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp,",
						"          DateKey as integer,",
						"          FullDate as date,",
						"          isWeekDay as boolean,",
						"          DayOfWeek as integer,",
						"          DayOfMonth as integer,",
						"          DayOfQuarter as integer,",
						"          DayOfYear as integer,",
						"          DayName as string,",
						"          WeekOfYear as integer,",
						"          WeekName as string,",
						"          MonthOfYear as integer,",
						"          MonthName as string,",
						"          CalendarQuarter as integer,",
						"          CalendarQuarterName as string,",
						"          CalendarYear as integer,",
						"          FiscalMonth as integer,",
						"          FiscalMonthName as string,",
						"          FiscalQuarter as integer,",
						"          FiscalQuarterName as string,",
						"          FiscalYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> covid19metrics",
						"country select(mapColumn(",
						"          Country,",
						"          CountryCode,",
						"          ID,",
						"          Updated,",
						"          Confirmed,",
						"          Confirmed_Change,",
						"          Deaths,",
						"          Deaths_Change,",
						"          Recovered,",
						"          Recovered_Change,",
						"          Country_Region,",
						"          FullDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"metrics, select5, select3, select4, policy union(byName: true)~> union1",
						"covid19metrics select(mapColumn(",
						"          Country,",
						"          CountryCode,",
						"          ID,",
						"          Updated,",
						"          Confirmed,",
						"          Confirmed_Change,",
						"          Deaths,",
						"          Deaths_Change,",
						"          Recovered,",
						"          Recovered_Change,",
						"          Country_Region,",
						"          FullDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"dates select(mapColumn(",
						"          Country,",
						"          CountryCode,",
						"          ID,",
						"          Updated,",
						"          Confirmed,",
						"          Confirmed_Change,",
						"          Deaths,",
						"          Deaths_Change,",
						"          Recovered,",
						"          Recovered_Change,",
						"          Country_Region,",
						"          FullDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Country as string,",
						"          CountryCode as string,",
						"          RegionName as string,",
						"          RegionCode as string,",
						"          Jurisdiction as string,",
						"          FullDate as timestamp,",
						"          C1schoolclosing as long,",
						"          C1Flag as long,",
						"          C2Workplace_closing as long,",
						"          C2Flag as long,",
						"          C3Cancel_public_events as long,",
						"          C3Flag as long,",
						"          C4Restrictions_on_gatherings as long,",
						"          C4Flag as long,",
						"          C5Close_public_transport as long,",
						"          C5Flag as long,",
						"          C6Stay_at_home_requirements as long,",
						"          C6Flag as long,",
						"          C7Restrictions_on_internal_movement as long,",
						"          C7Flag as long,",
						"          C8International_travel_controls as long,",
						"          E1Income_support as long,",
						"          E1Flag as long,",
						"          E2Debt_contract_relief as long,",
						"          E3Fiscal_measures as double,",
						"          E4International_support as double,",
						"          H1Public_information_campaigns as double,",
						"          H1Flag as long,",
						"          H2Testing_policy as long,",
						"          H3Contact_tracing as long,",
						"          H4Emergency_investment_in_healthcare as double,",
						"          H5Investment_in_vaccines as double,",
						"          H6Facial_Coverings as double,",
						"          H6Flag as long,",
						"          H7Vaccination_policy as long,",
						"          H7Flag as long,",
						"          H8Protection_of_elderly_people as long,",
						"          H8Flag as long,",
						"          M1Wildcard as long,",
						"          StringencyIndex as double,",
						"          StringencyIndexForDisplay as double,",
						"          StringencyLegacyIndex as double,",
						"          StringencyLegacyIndexForDisplay as double,",
						"          GovernmentResponseIndex as double,",
						"          GovernmentResponseIndexForDisplay as double,",
						"          ContainmentHealthIndex as double,",
						"          ContainmentHealthIndexForDisplay as double,",
						"          EconomicSupportIndex as double,",
						"          EconomicSupportIndexForDisplay as double,",
						"          id as string,",
						"          rid as string,",
						"          self as string,",
						"          etag as string,",
						"          attachments as string,",
						"          ts as long,",
						"          CountryName as string,",
						"          Date as timestamp,",
						"          Confirmed as integer,",
						"          Deaths as integer,",
						"          Recovered as integer",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['combineddata.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/policyparquet')]",
				"[concat(variables('factoryId'), '/datasets/vmdatesParquet')]",
				"[concat(variables('factoryId'), '/datasets/vmcovid19dataparquet')]",
				"[concat(variables('factoryId'), '/datasets/vmcountryparquet')]",
				"[concat(variables('factoryId'), '/datasets/parquet1covid19_metricssql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vmcountryparquet",
								"type": "DatasetReference"
							},
							"name": "country"
						},
						{
							"dataset": {
								"referenceName": "parquet1datesSQL",
								"type": "DatasetReference"
							},
							"name": "dates"
						},
						{
							"dataset": {
								"referenceName": "policyparquet",
								"type": "DatasetReference"
							},
							"name": "policy"
						},
						{
							"dataset": {
								"referenceName": "parquet1covid19_metricssql",
								"type": "DatasetReference"
							},
							"name": "metricssql"
						},
						{
							"dataset": {
								"referenceName": "vmcovid19dataparquet",
								"type": "DatasetReference"
							},
							"name": "metricsvm"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "newCountry",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "newDates",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "newPolicy",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "Recoveries",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "Cases",
								"type": "DatasetReference"
							},
							"name": "sink5"
						},
						{
							"dataset": {
								"referenceName": "deaths",
								"type": "DatasetReference"
							},
							"name": "sink6"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "union1"
						},
						{
							"name": "recoveryselect"
						},
						{
							"name": "casesselect"
						},
						{
							"name": "deathselect"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> country",
						"source(output(",
						"          DateKey as integer,",
						"          FullDate as date,",
						"          isWeekDay as boolean,",
						"          DayOfWeek as integer,",
						"          DayOfMonth as integer,",
						"          DayOfQuarter as integer,",
						"          DayOfYear as integer,",
						"          DayName as string,",
						"          WeekOfYear as integer,",
						"          WeekName as string,",
						"          MonthOfYear as integer,",
						"          MonthName as string,",
						"          CalendarQuarter as integer,",
						"          CalendarQuarterName as string,",
						"          CalendarYear as integer,",
						"          FiscalMonth as integer,",
						"          FiscalMonthName as string,",
						"          FiscalQuarter as integer,",
						"          FiscalQuarterName as string,",
						"          FiscalYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> dates",
						"source(output(",
						"          CountryName as string,",
						"          CountryCode as string,",
						"          RegionName as string,",
						"          RegionCode as string,",
						"          Jurisdiction as string,",
						"          Date as timestamp,",
						"          C1schoolclosing as long,",
						"          C1Flag as long,",
						"          C2Workplace_closing as long,",
						"          C2Flag as long,",
						"          C3Cancel_public_events as long,",
						"          C3Flag as long,",
						"          C4Restrictions_on_gatherings as long,",
						"          C4Flag as long,",
						"          C5Close_public_transport as long,",
						"          C5Flag as long,",
						"          C6Stay_at_home_requirements as long,",
						"          C6Flag as long,",
						"          C7Restrictions_on_internal_movement as long,",
						"          C7Flag as long,",
						"          C8International_travel_controls as long,",
						"          E1Income_support as long,",
						"          E1Flag as long,",
						"          E2Debt_contract_relief as long,",
						"          E3Fiscal_measures as double,",
						"          E4International_support as double,",
						"          H1Public_information_campaigns as double,",
						"          H1Flag as long,",
						"          H2Testing_policy as long,",
						"          H3Contact_tracing as long,",
						"          H4Emergency_investment_in_healthcare as double,",
						"          H5Investment_in_vaccines as double,",
						"          H6Facial_Coverings as double,",
						"          H6Flag as long,",
						"          H7Vaccination_policy as long,",
						"          H7Flag as long,",
						"          H8Protection_of_elderly_people as long,",
						"          H8Flag as long,",
						"          M1Wildcard as long,",
						"          StringencyIndex as double,",
						"          StringencyIndexForDisplay as double,",
						"          StringencyLegacyIndex as double,",
						"          StringencyLegacyIndexForDisplay as double,",
						"          GovernmentResponseIndex as double,",
						"          GovernmentResponseIndexForDisplay as double,",
						"          ContainmentHealthIndex as double,",
						"          ContainmentHealthIndexForDisplay as double,",
						"          EconomicSupportIndex as double,",
						"          EconomicSupportIndexForDisplay as double,",
						"          id as string,",
						"          rid as string,",
						"          self as string,",
						"          etag as string,",
						"          attachments as string,",
						"          ts as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> policy",
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> metricssql",
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> metricsvm",
						"country select(mapColumn(",
						"          Country,",
						"          CountryCode,",
						"          Latitude,",
						"          Longitude",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"policy select(mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"metricssql, metricsvm union(byName: true)~> union1",
						"union1 select(mapColumn(",
						"          ID,",
						"          Updated,",
						"          Recovered,",
						"          Recovered_Change,",
						"          ISO3",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> recoveryselect",
						"union1 select(mapColumn(",
						"          ID,",
						"          Updated,",
						"          Confirmed,",
						"          Confirmed_Change,",
						"          ISO3",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> casesselect",
						"union1 select(mapColumn(",
						"          ID,",
						"          Updated,",
						"          Deaths,",
						"          Deaths_Change,",
						"          ISO3",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> deathselect",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp,",
						"          DateKey as integer,",
						"          FullDate as timestamp,",
						"          isWeekDay as boolean,",
						"          DayOfWeek as integer,",
						"          DayOfMonth as integer,",
						"          DayOfQuarter as integer,",
						"          DayOfYear as integer,",
						"          DayName as string,",
						"          WeekOfYear as integer,",
						"          WeekName as string,",
						"          MonthOfYear as integer,",
						"          MonthName as string,",
						"          CalendarQuarter as integer,",
						"          CalendarQuarterName as string,",
						"          CalendarYear as integer,",
						"          FiscalMonth as integer,",
						"          FiscalMonthName as string,",
						"          FiscalQuarter as integer,",
						"          FiscalQuarterName as string,",
						"          FiscalYear as integer,",
						"          CountryName as string,",
						"          RegionName as string,",
						"          RegionCode as string,",
						"          Jurisdiction as string,",
						"          Date as timestamp,",
						"          C1schoolclosing as long,",
						"          C1Flag as long,",
						"          C2Workplace_closing as long,",
						"          C2Flag as long,",
						"          C3Cancel_public_events as long,",
						"          C3Flag as long,",
						"          C4Restrictions_on_gatherings as long,",
						"          C4Flag as long,",
						"          C5Close_public_transport as long,",
						"          C5Flag as long,",
						"          C6Stay_at_home_requirements as long,",
						"          C6Flag as long,",
						"          C7Restrictions_on_internal_movement as long,",
						"          C7Flag as long,",
						"          C8International_travel_controls as long,",
						"          E1Income_support as long,",
						"          E1Flag as long,",
						"          E2Debt_contract_relief as long,",
						"          E3Fiscal_measures as double,",
						"          E4International_support as double,",
						"          H1Public_information_campaigns as double,",
						"          H1Flag as long,",
						"          H2Testing_policy as long,",
						"          H3Contact_tracing as long,",
						"          H4Emergency_investment_in_healthcare as double,",
						"          H5Investment_in_vaccines as double,",
						"          H6Facial_Coverings as double,",
						"          H6Flag as long,",
						"          H7Vaccination_policy as long,",
						"          H7Flag as long,",
						"          H8Protection_of_elderly_people as long,",
						"          H8Flag as long,",
						"          M1Wildcard as long,",
						"          StringencyIndex as double,",
						"          StringencyIndexForDisplay as double,",
						"          StringencyLegacyIndex as double,",
						"          StringencyLegacyIndexForDisplay as double,",
						"          GovernmentResponseIndex as double,",
						"          GovernmentResponseIndexForDisplay as double,",
						"          ContainmentHealthIndex as double,",
						"          ContainmentHealthIndexForDisplay as double,",
						"          EconomicSupportIndex as double,",
						"          EconomicSupportIndexForDisplay as double,",
						"          id as string,",
						"          rid as string,",
						"          self as string,",
						"          etag as string,",
						"          attachments as string,",
						"          ts as long",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['newCountry.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"dates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['newDates.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['newPolicy.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3",
						"recoveryselect sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['Recoveries.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink4",
						"casesselect sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['Cases.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink5",
						"deathselect sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['death.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink6"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/vmcountryparquet')]",
				"[concat(variables('factoryId'), '/datasets/parquet1datesSQL')]",
				"[concat(variables('factoryId'), '/datasets/policyparquet')]",
				"[concat(variables('factoryId'), '/datasets/parquet1covid19_metricssql')]",
				"[concat(variables('factoryId'), '/datasets/vmcovid19dataparquet')]",
				"[concat(variables('factoryId'), '/datasets/newPolicy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLpipline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Covid19MetricsSQLserver1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "parquet1covid19_metricssql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "parquet1datesSQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-29T20:34:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/parquet1covid19_metricssql')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/datasets/parquet1datesSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/policymetricpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"policy": {},
									"dates": {},
									"metrics": {},
									"country": {},
									"covid19metrics": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/policymetricpipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"country": {},
									"dates": {},
									"policy": {},
									"metricssql": {},
									"metricsvm": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sink5": {},
									"sink6": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		}
	]
}